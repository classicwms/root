Index: ../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5fafbe46-49d2-4232-a8c4-14c7c55e837e\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/gradle.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/gradle.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Prod_code/ConnectorService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Prod_code/ConnectorService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../ControlGroup/Code/Dev/SparkService/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../ControlGroup/Code/Dev/SparkService/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/gradle.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/gradle.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/vcs.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/CommonService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/CommonService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/modules/ConnectorService.main.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/modules/ConnectorService.main.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/compiler.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/compiler.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules/IDMasterService.main.iml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundTransactionService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundTransactionService/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1CompositeKey.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1CompositeKey.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/v2/ImBasicData1V2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/v2/ImBasicData1V2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../../../Walkaroo/Code/Java/UAT/TransactionService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../../../Walkaroo/Code/Java/UAT/TransactionService/.idea/misc.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/../../../../..\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2urBq1q0TlCna9ebxjDAT8EPFBe\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/GIT/ALL/root/ALMailam/Code/Autolab/Current_Prod/TransactionService&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"TransactionService\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"TransactionService\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5fafbe46-49d2-4232-a8c4-14c7c55e837e\" name=\"Changes\" comment=\"\" />\r\n      <created>1742996999521</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1742996999521</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml b/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml
--- a/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml	
+++ b/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml	
@@ -5,40 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="5fafbe46-49d2-4232-a8c4-14c7c55e837e" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/gradle.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/EnterpriseSetupService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../3PL/Code/Dev/TransactionService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Prod_code/ConnectorService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Prod_code/ConnectorService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../ALMConnector/Code/Project/ConnectorService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../ControlGroup/Code/Dev/SparkService/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../ControlGroup/Code/Dev/SparkService/src/main/resources/application.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/gradle.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/IDMasterService/.idea/vcs.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/CommonService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/CommonService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/modules/ConnectorService.main.iml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/modules/ConnectorService.main.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/compiler.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/IDMasterService/.idea/modules/IDMasterService.main.iml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundOrderService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/InboundTransactionService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundOrderService/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundTransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundTransactionService/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1.java" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1CompositeKey.java" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/ImBasicData1CompositeKey.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/v2/ImBasicData1V2.java" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/java/com/tekclover/wms/api/masters/model/imbasicdata1/v2/ImBasicData1V2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../Namratha/Code/Java/MasterSetupService/src/main/resources/application.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../../../Walkaroo/Code/Java/UAT/TransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../../../Walkaroo/Code/Java/UAT/TransactionService/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../../../../../MultiTenant/MultiDBIntegratedCode/OutboundTransactionService/.idea/.name" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -105,6 +73,19 @@
       <option name="presentableId" value="Default" />
       <updated>1742996999521</updated>
     </task>
+    <task id="LOCAL-00001" summary="order_process">
+      <option name="closed" value="true" />
+      <created>1750145657519</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1750145657519</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="order_process" />
+    <option name="LAST_COMMIT_MESSAGE" value="order_process" />
+  </component>
 </project>
\ No newline at end of file
Index: src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tekclover.wms.api.inbound.orders.service.namratha;\r\n\r\nimport com.microsoft.sqlserver.jdbc.SQLServerException;\r\nimport com.tekclover.wms.api.inbound.orders.config.dynamicConfig.DataBaseContextHolder;\r\nimport com.tekclover.wms.api.inbound.orders.controller.BadRequestException;\r\nimport com.tekclover.wms.api.inbound.orders.controller.InboundOrderRequestException;\r\nimport com.tekclover.wms.api.inbound.orders.model.IKeyValuePair;\r\nimport com.tekclover.wms.api.inbound.orders.model.auth.AuthToken;\r\nimport com.tekclover.wms.api.inbound.orders.model.dto.ImBasicData1;\r\nimport com.tekclover.wms.api.inbound.orders.model.dto.ImBasicData1V2;\r\nimport com.tekclover.wms.api.inbound.orders.model.dto.ImPartner;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.gr.v2.GrHeaderV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.preinbound.InboundIntegrationHeader;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.preinbound.v2.PreInboundHeaderEntityV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.preinbound.v2.PreInboundLineEntityV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.staging.CaseConfirmation;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.staging.v2.StagingHeaderV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.staging.v2.StagingLineEntityV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.v2.InboundHeaderV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.inbound.v2.InboundLineV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.outbound.ordermangement.v2.OrderManagementLineV2;\r\nimport com.tekclover.wms.api.inbound.orders.model.warehouse.Warehouse;\r\nimport com.tekclover.wms.api.inbound.orders.model.warehouse.inbound.v2.*;\r\nimport com.tekclover.wms.api.inbound.orders.repository.*;\r\nimport com.tekclover.wms.api.inbound.orders.service.BaseService;\r\nimport com.tekclover.wms.api.inbound.orders.util.CommonUtils;\r\nimport com.tekclover.wms.api.inbound.orders.util.DateUtils;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.hibernate.exception.LockAcquisitionException;\r\nimport org.springframework.beans.BeanUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.dao.CannotAcquireLockException;\r\nimport org.springframework.retry.annotation.Backoff;\r\nimport org.springframework.retry.annotation.Retryable;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.UnexpectedRollbackException;\r\nimport org.springframework.transaction.annotation.Propagation;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.sql.SQLException;\r\nimport java.text.ParseException;\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.util.*;\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.CompletionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static java.util.stream.Collectors.toList;\r\n\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class SupplierInvoiceServiceV4 extends BaseService {\r\n\r\n    private final RepositoryProvider repo;\r\n\r\n    @Autowired\r\n    InboundLineV2Repository inboundLineV2Repository;\r\n\r\n    @Autowired\r\n    PreInboundLineV2Repository preInboundLineV2Repository;\r\n\r\n    @Autowired\r\n    ImBasicData1V2Repository imBasicData1V2Repository;\r\n\r\n    @Autowired\r\n    StagingHeaderV2Repository stagingHeaderV2Repository;\r\n\r\n    @Autowired\r\n    InboundHeaderV2Repository inboundHeaderV2Repository;\r\n\r\n    @Autowired\r\n    PreInboundHeaderV2Repository preInboundHeaderV2Repository;\r\n\r\n    @Autowired\r\n    DbConfigRepository dbConfigRepository;\r\n\r\n    @Autowired\r\n    GrHeaderV2Repository grHeaderV2Repository;\r\n\r\n    @Autowired\r\n    InboundOrderV2Repository inboundOrderV2Repository;\r\n\r\n    @Autowired\r\n    WarehouseRepository warehouseRepository;\r\n\r\n    private static String WAREHOUSEID_NUMBERRANGE = \"110\";\r\n\r\n//    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = {Exception.class, Throwable.class})\r\n//    @Retryable(value = {SQLException.class, SQLServerException.class, CannotAcquireLockException.class,\r\n//            LockAcquisitionException.class, UnexpectedRollbackException.class}, maxAttempts = 3, backoff = @Backoff(delay = 5000))\r\n//    public List<ASNV2> processInboundReceivedV2(List<ASNV2> asnv2List) throws Exception {\r\n//\r\n//        List<ASNV2> processedAsns = Collections.synchronizedList(new ArrayList<>());\r\n//        log.info(\"Inbound Process Started for {} ASNs\", asnv2List.size());\r\n//\r\n//        ExecutorService executorService = Executors.newFixedThreadPool(8);\r\n//\r\n//        try {\r\n//            for (ASNV2 asnv2 : asnv2List) {\r\n//                ASNHeaderV2 headerV2 = asnv2.getAsnHeader();\r\n//                List<ASNLineV2> lineV2List = asnv2.getAsnLine();\r\n//                String companyCode = headerV2.getCompanyCode();\r\n//                String plantId = headerV2.getBranchCode();\r\n//                String mfrName = lineV2List.get(0).getManufacturerName();\r\n//\r\n//                //Checking whether received refDocNumber processed already.\r\n//                Optional<PreInboundHeaderEntityV2> orderProcessedStatus = repo.preInboundHeaderV2Repository.\r\n//                        findByRefDocNumberAndInboundOrderTypeIdAndDeletionIndicator(headerV2.getAsnNumber(), 1L, 0L);\r\n//                if (!orderProcessedStatus.isEmpty()) {\r\n//                    throw new BadRequestException(\"Order :\" + headerV2.getAsnNumber() + \" already processed. Reprocessing can't be allowed.\");\r\n//                }\r\n//\r\n//                // Get Warehouse\r\n//                Optional<Warehouse> dbWarehouse =\r\n//                        repo.warehouseRepository.findByCompanyCodeIdAndPlantIdAndLanguageIdAndDeletionIndicator(companyCode, plantId, \"EN\", 0L);\r\n//                String warehouseId = dbWarehouse.get().getWarehouseId();\r\n//                String languageId = dbWarehouse.get().getLanguageId();\r\n//                log.info(\"Warehouse ID: {}\", warehouseId);\r\n//\r\n//                // Description_Set\r\n//                IKeyValuePair description = repo.stagingLineV2Repository.getDescription(companyCode, languageId, plantId, warehouseId);\r\n//                String companyText = description.getCompanyDesc();\r\n//                String plantText = description.getPlantDesc();\r\n//                String warehouseText = description.getWarehouseDesc();\r\n//\r\n//                String idMasterAuthToken = repo.authTokenService.getIDMasterServiceAuthToken().getAccess_token();\r\n//                String masterAuthToken = repo.authTokenService.getMastersServiceAuthToken().getAccess_token();\r\n//                Long statusId = 13L;\r\n//\r\n//                // Getting PreInboundNo, StagingNo, CaseCode from NumberRangeTable\r\n//                String preInboundNo = getNextRangeNumber(2L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n//                String stagingNo = getNextRangeNumber(3L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n//                String caseCode = getNextRangeNumber(4L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n//                String grNumber = getNextRangeNumber(5L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n//                log.info(\"PreInboundNo, StagingNo, CaseCode, GrNumber : \" + preInboundNo + \", \" + stagingNo + \", \" + caseCode + \", \" + grNumber);\r\n//\r\n//                statusDescription = getStatusDescription(statusId, languageId);\r\n//                description = getDescription(companyCode, plantId, languageId, warehouseId);\r\n//\r\n//\r\n//                // Step 1: Create headers before line processing\r\n//                PreInboundHeaderEntityV2 preInboundHeader = createPreInboundHeaderV2(\r\n//                        companyCode, languageId, plantId, preInboundNo, headerV2, warehouseId, companyText, plantText, warehouseText, mfrName);\r\n//                log.info(\"PreInboundHeader created: {}\", preInboundHeader.getPreInboundNo());\r\n//\r\n//                InboundHeaderV2 inboundHeader = createInboundHeader(preInboundHeader, lineV2List.size());\r\n//                log.info(\"Inbound Header Created: {}\", inboundHeader);\r\n//\r\n//                StagingHeaderV2 stagingHeader = createStagingHeaderV2(preInboundHeader, stagingNo);\r\n//                log.info(\"StagingHeader Created: {}\", stagingHeader);\r\n//\r\n//                GrHeaderV2 grHeader = createGrHeader(stagingHeader, caseCode, grNumber);\r\n//                log.info(\"GrHeader Created: {}\", grHeader);\r\n//\r\n//                // Collections for batch saving\r\n//                List<ImBasicData1V2> imBasicDataList = Collections.synchronizedList(new ArrayList<>());\r\n//                List<PreInboundLineEntityV2> preInboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n//                List<InboundLineV2> inboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n//                List<StagingLineEntityV2> stagingLineList = Collections.synchronizedList(new ArrayList<>());\r\n//\r\n//                String partBarCode = generateBarCodeId(grHeader.getRefDocNumber());\r\n//                // Process lines in parallel\r\n//                List<CompletableFuture<Void>> futures = lineV2List.stream()\r\n//                        .map(asnLineV2 -> CompletableFuture.runAsync(() -> {\r\n//                            try {\r\n//                                processSingleASNLine(asnv2, asnLineV2, preInboundHeader, inboundHeader, stagingHeader, grHeader,\r\n//                                        imBasicDataList, preInboundLineList, inboundLineList, stagingLineList, partBarCode);\r\n//                            } catch (Exception e) {\r\n//                                log.error(\"Error processing ASN Line for ASN: {}\", headerV2.getAsnNumber(), e);\r\n//                                throw new RuntimeException(e);\r\n//                            }\r\n//                        }, executorService))\r\n//                        .collect(Collectors.toList());\r\n//\r\n//                CompletableFuture<Void> allFutures = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\r\n//\r\n//                try {\r\n//                    allFutures.join(); // Wait for all tasks to finish\r\n//                } catch (CompletionException e) {\r\n//                    log.error(\"Exception during ASN line processing: {}\", e.getCause().getMessage());\r\n//                    throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getCause().getMessage());\r\n//                }\r\n//\r\n//                // Batch Save All Records\r\n//                repo.imBasicData1V2Repository.deleteAll(imBasicDataList);\r\n//                repo.imBasicData1V2Repository.saveAll(imBasicDataList);\r\n//                repo.preInboundLineV2Repository.saveAll(preInboundLineList);\r\n//                repo.inboundLineV2Repository.saveAll(inboundLineList);\r\n//                repo.stagingLineV2Repository.saveAll(stagingLineList);\r\n//\r\n//                processedAsns.add(asnv2);\r\n//            }\r\n//        } catch (Exception e) {\r\n//            log.error(\"Error processing inbound ASN Lines\", e);\r\n//            throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getMessage());\r\n//        } finally {\r\n//            executorService.shutdown();\r\n//        }\r\n//        log.info(\"Inbound Process Completed for {} ASNs\", processedAsns.size());\r\n//        return processedAsns;\r\n//    }\r\n\r\n\r\n\r\n    /**\r\n     * NAMRATHA\r\n     * @param asnv2\r\n     * @return\r\n     */\r\n    public InboundOrderV2 saveASNV6(ASNV2 asnv2) {\r\n        try {\r\n            ASNHeaderV2 asnV2Header = asnv2.getAsnHeader();\r\n            List<ASNLineV2> asnLineV2s = asnv2.getAsnLine();\r\n            InboundOrderV2 apiHeader = new InboundOrderV2();\r\n            BeanUtils.copyProperties(asnV2Header, apiHeader, CommonUtils.getNullPropertyNames(asnV2Header));\r\n\r\n            apiHeader.setOrderId(asnV2Header.getAsnNumber());\r\n            apiHeader.setCompanyCode(asnV2Header.getCompanyCode());\r\n            apiHeader.setBranchCode(asnV2Header.getBranchCode());\r\n            apiHeader.setRefDocumentNo(asnV2Header.getAsnNumber());\r\n\r\n            apiHeader.setOrderReceivedOn(new Date());\r\n            apiHeader.setMiddlewareId(asnV2Header.getMiddlewareId());\r\n            apiHeader.setMiddlewareTable(asnV2Header.getMiddlewareTable());\r\n\r\n            apiHeader.setIsCancelled(asnV2Header.getIsCancelled());\r\n            apiHeader.setIsCompleted(asnV2Header.getIsCompleted());\r\n            apiHeader.setUpdatedOn(asnV2Header.getUpdatedOn());\r\n            apiHeader.setRefDocumentType(\"SUPPLIER INVOICE\");\r\n\r\n            apiHeader.setLanguageId(asnV2Header.getLanguageId() != null ? asnV2Header.getLanguageId() : LANG_ID);\r\n            if (asnV2Header.getWarehouseId() != null && !asnV2Header.getWarehouseId().isBlank()) {\r\n                apiHeader.setWarehouseID(asnV2Header.getWarehouseId());\r\n            } else {\r\n                // Get Warehouse\r\n                Optional<Warehouse> dbWarehouse =\r\n                        warehouseRepository.findByCompanyCodeIdAndPlantIdAndLanguageIdAndDeletionIndicator(\r\n                                asnV2Header.getCompanyCode(),\r\n                                asnV2Header.getBranchCode(),\r\n                                asnV2Header.getLanguageId() != null ? asnV2Header.getLanguageId() : LANG_ID,\r\n                                0L\r\n                        );\r\n                log.info(\"dbWarehouse : \" + dbWarehouse);\r\n                apiHeader.setWarehouseID(dbWarehouse.get().getWarehouseId());\r\n            }\r\n\r\n            if (asnV2Header.getInboundOrderTypeId() != null) {\r\n                apiHeader.setInboundOrderTypeId(asnV2Header.getInboundOrderTypeId());\r\n            } else {\r\n                apiHeader.setInboundOrderTypeId(1L);                                            //Default\r\n            }\r\n            Set<InboundOrderLinesV2> orderLines = new HashSet<>();\r\n            for (ASNLineV2 asnLineV2 : asnLineV2s) {\r\n                InboundOrderLinesV2 apiLine = new InboundOrderLinesV2();\r\n                BeanUtils.copyProperties(asnLineV2, apiLine, CommonUtils.getNullPropertyNames(asnLineV2));\r\n                apiLine.setLineReference(asnLineV2.getLineReference());            // IB_LINE_NO\r\n                apiLine.setItemCode(asnLineV2.getSku());                            // ITM_CODE\r\n                apiLine.setItemText(asnLineV2.getSkuDescription());                // ITEM_TEXT\r\n                apiLine.setContainerNumber(asnLineV2.getContainerNumber());            // CONT_NO\r\n                if (asnLineV2.getSupplierCode() != null) {\r\n                    apiLine.setSupplierCode(asnLineV2.getSupplierCode());                // PARTNER_CODE\r\n                } else {\r\n                    apiLine.setSupplierCode(asnV2Header.getSupplierCode());\r\n                }\r\n                apiLine.setSupplierPartNumber(asnLineV2.getSupplierPartNumber());  // PARTNER_ITM_CODE\r\n                apiLine.setManufacturerName(MFR_NAME);\r\n                apiLine.setManufacturerCode(MFR_NAME);\r\n                apiLine.setManufacturerPartNo(MFR_NAME);\r\n                apiLine.setOrigin(asnLineV2.getOrigin());\r\n                apiLine.setCompanyCode(asnLineV2.getCompanyCode());\r\n                apiLine.setBranchCode(asnLineV2.getBranchCode());\r\n                apiLine.setSupplierName(asnLineV2.getSupplierName());\r\n                apiLine.setBrand(asnLineV2.getBrand());\r\n                apiLine.setOrderId(apiHeader.getOrderId());\r\n                apiLine.setManufacturerFullName(asnLineV2.getManufacturerFullName());\r\n                apiLine.setPurchaseOrderNumber(asnLineV2.getPurchaseOrderNumber());\r\n                apiHeader.setPurchaseOrderNumber(asnLineV2.getPurchaseOrderNumber());\r\n\r\n                if (asnV2Header.getInboundOrderTypeId() != null) {\r\n                    apiLine.setInboundOrderTypeId(asnV2Header.getInboundOrderTypeId());\r\n                } else {\r\n                    apiLine.setInboundOrderTypeId(1L);                                            //Default\r\n                }\r\n                if (asnLineV2.getExpectedQtyInCases() != null && asnLineV2.getExpectedQtyInPieces() != null) {\r\n                    Double ordQty = asnLineV2.getExpectedQtyInPieces() / asnLineV2.getExpectedQtyInCases();  // 50 / 2 => 25\r\n                    apiLine.setExpectedQty(ordQty);     // 25\r\n                    apiLine.setOrderedQty(ordQty);      // 25\r\n                    apiLine.setBagSize(ordQty);         // 25\r\n                } else {\r\n                    Double ordQty = asnLineV2.getExpectedQty() / asnLineV2.getNoBags();  // 50 / 2 => 25\r\n                    apiLine.setExpectedQty(ordQty);     // 25\r\n                    apiLine.setOrderedQty(ordQty);      // 25\r\n                    apiLine.setBagSize(ordQty);         // 25\r\n                }\r\n\r\n                apiLine.setNoBags(asnLineV2.getExpectedQtyInCases());\r\n                apiLine.setSupplierInvoiceNo(asnLineV2.getSupplierInvoiceNo());\r\n                apiLine.setReceivedBy(asnLineV2.getReceivedBy());\r\n                apiLine.setReceivedQty(asnLineV2.getReceivedQty());\r\n                apiLine.setReceivedDate(asnLineV2.getReceivedDate());\r\n                apiLine.setIsCancelled(asnLineV2.getIsCancelled());\r\n                apiLine.setIsCompleted(asnLineV2.getIsCompleted());\r\n\r\n                apiLine.setMiddlewareHeaderId(asnLineV2.getMiddlewareHeaderId());\r\n                apiLine.setMiddlewareId(asnLineV2.getMiddlewareId());\r\n                apiLine.setMiddlewareTable(asnLineV2.getMiddlewareTable());\r\n\r\n                if (asnLineV2.getExpectedDate() != null) {\r\n                    if (asnLineV2.getExpectedDate().contains(\"-\")) {\r\n                        // EA_DATE\r\n                        try {\r\n                            Date reqDelDate = new Date();\r\n                            if (asnLineV2.getExpectedDate().length() > 10) {\r\n                                reqDelDate = DateUtils.convertStringToDateWithTime(asnLineV2.getExpectedDate());\r\n                            }\r\n                            if (asnLineV2.getExpectedDate().length() == 10) {\r\n                                reqDelDate = DateUtils.convertStringToDate2(asnLineV2.getExpectedDate());\r\n                            }\r\n                            apiLine.setExpectedDate(reqDelDate);\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                            throw new BadRequestException(\"Date format should be yyyy-MM-dd\");\r\n                        }\r\n                    }\r\n                    if (asnLineV2.getExpectedDate().contains(\"/\")) {\r\n                        // EA_DATE\r\n                        try {\r\n                            ZoneId defaultZoneId = ZoneId.systemDefault();\r\n                            String sdate = asnLineV2.getExpectedDate();\r\n                            String firstHalf = sdate.substring(0, sdate.lastIndexOf(\"/\"));\r\n                            String secondHalf = sdate.substring(sdate.lastIndexOf(\"/\") + 1);\r\n                            secondHalf = \"/20\" + secondHalf;\r\n                            sdate = firstHalf + secondHalf;\r\n                            log.info(\"sdate--------> : \" + sdate);\r\n\r\n                            LocalDate localDate = DateUtils.dateConv2(sdate);\r\n                            log.info(\"localDate--------> : \" + localDate);\r\n                            Date date = Date.from(localDate.atStartOfDay(defaultZoneId).toInstant());\r\n                            apiLine.setExpectedDate(date);\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                            throw new InboundOrderRequestException(\"Date format should be yyyy-MM-dd\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                apiLine.setPackQty(asnLineV2.getPackQty());                    // ITM_CASE_QTY\r\n                orderLines.add(apiLine);\r\n            }\r\n            apiHeader.setLine(orderLines);\r\n            apiHeader.setOrderProcessedOn(new Date());\r\n\r\n            if (asnv2.getAsnLine() != null && !asnv2.getAsnLine().isEmpty()) {\r\n                apiHeader.setProcessedStatusId(1L);\r\n                log.info(\"apiHeader : \" + apiHeader);\r\n                InboundOrderV2 createdOrder = createInboundOrdersV2(apiHeader);\r\n                log.info(\"ASNV2 Order Success : \" + createdOrder);\r\n                return createdOrder;\r\n            } else if (asnv2.getAsnLine() == null || asnv2.getAsnLine().isEmpty()) {\r\n                // throw the error as Lines are Empty and set the Indicator as '100'\r\n                apiHeader.setProcessedStatusId(100L);\r\n                log.info(\"apiHeader : \" + apiHeader);\r\n                InboundOrderV2 createdOrder = createInboundOrdersV2(apiHeader);\r\n                log.info(\"ASNV2 Order Failed : \" + createdOrder);\r\n                throw new BadRequestException(\"ASNV2 Order doesn't contain any Lines.\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw e;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Async(\"asyncTaskExecutor\")\r\n    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = {Exception.class, Throwable.class})\r\n    @Retryable(value = {SQLException.class, SQLServerException.class, CannotAcquireLockException.class,\r\n            LockAcquisitionException.class, UnexpectedRollbackException.class}, maxAttempts = 3, backoff = @Backoff(delay = 5000))\r\n    public ASNV2 processInboundReceivedV2(ASNV2 asnv2) throws Exception {\r\n\r\n        ExecutorService executorService = Executors.newFixedThreadPool(8);\r\n\r\n        try {\r\n            ASNHeaderV2 headerV2 = asnv2.getAsnHeader();\r\n            List<ASNLineV2> lineV2List = asnv2.getAsnLine();\r\n            String companyCode = headerV2.getCompanyCode();\r\n            String plantId = headerV2.getBranchCode();\r\n            String mfrName = lineV2List.get(0).getManufacturerName();\r\n\r\n            //Checking whether received refDocNumber processed already.\r\n            Optional<PreInboundHeaderEntityV2> orderProcessedStatus = repo.preInboundHeaderV2Repository.\r\n                    findByRefDocNumberAndInboundOrderTypeIdAndDeletionIndicator(headerV2.getAsnNumber(), 1L, 0L);\r\n            if (!orderProcessedStatus.isEmpty()) {\r\n                throw new BadRequestException(\"Order :\" + headerV2.getAsnNumber() + \" already processed. Reprocessing can't be allowed.\");\r\n            }\r\n\r\n            // Get Warehouse\r\n            Optional<Warehouse> dbWarehouse =\r\n                    repo.warehouseRepository.findByCompanyCodeIdAndPlantIdAndLanguageIdAndDeletionIndicator(companyCode, plantId, \"EN\", 0L);\r\n            String warehouseId = dbWarehouse.get().getWarehouseId();\r\n            String languageId = dbWarehouse.get().getLanguageId();\r\n            log.info(\"Warehouse ID: {}\", warehouseId);\r\n\r\n            // Description_Set\r\n            IKeyValuePair description = repo.stagingLineV2Repository.getDescription(companyCode, languageId, plantId, warehouseId);\r\n            String companyText = description.getCompanyDesc();\r\n            String plantText = description.getPlantDesc();\r\n            String warehouseText = description.getWarehouseDesc();\r\n\r\n            String idMasterAuthToken = repo.authTokenService.getIDMasterServiceAuthToken().getAccess_token();\r\n            Long statusId = 13L;\r\n\r\n            // Getting PreInboundNo, StagingNo, CaseCode from NumberRangeTable\r\n            String preInboundNo = getNextRangeNumber(2L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n            String stagingNo = getNextRangeNumber(3L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n            String caseCode = getNextRangeNumber(4L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n            String grNumber = getNextRangeNumber(5L, companyCode, plantId, languageId, warehouseId, idMasterAuthToken);\r\n            log.info(\"PreInboundNo, StagingNo, CaseCode, GrNumber : \" + preInboundNo + \", \" + stagingNo + \", \" + caseCode + \", \" + grNumber);\r\n\r\n            statusDescription = getStatusDescription(statusId, languageId);\r\n            description = getDescription(companyCode, plantId, languageId, warehouseId);\r\n\r\n\r\n            // Step 1: Create headers before line processing\r\n            PreInboundHeaderEntityV2 preInboundHeader = createPreInboundHeaderV2(\r\n                    companyCode, languageId, plantId, preInboundNo, headerV2, warehouseId, companyText, plantText, warehouseText, mfrName);\r\n            log.info(\"PreInboundHeader created: {}\", preInboundHeader.getPreInboundNo());\r\n\r\n            InboundHeaderV2 inboundHeader = createInboundHeader(preInboundHeader, lineV2List.size());\r\n            log.info(\"Inbound Header Created: {}\", inboundHeader);\r\n\r\n            StagingHeaderV2 stagingHeader = createStagingHeaderV2(preInboundHeader, stagingNo);\r\n            log.info(\"StagingHeader Created: {}\", stagingHeader);\r\n\r\n            GrHeaderV2 grHeader = createGrHeader(stagingHeader, caseCode, grNumber);\r\n            log.info(\"GrHeader Created: {}\", grHeader);\r\n\r\n            // Collections for batch saving\r\n            List<ImBasicData1V2> imBasicDataList = Collections.synchronizedList(new ArrayList<>());\r\n            List<PreInboundLineEntityV2> preInboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n            List<InboundLineV2> inboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n            List<StagingLineEntityV2> stagingLineList = Collections.synchronizedList(new ArrayList<>());\r\n\r\n            String partBarCode = generateBarCodeId(grHeader.getRefDocNumber());\r\n            // Process lines in parallel\r\n            List<CompletableFuture<Void>> futures = lineV2List.stream()\r\n                    .map(asnLineV2 -> CompletableFuture.runAsync(() -> {\r\n                        try {\r\n                            processSingleASNLine(asnv2, asnLineV2, preInboundHeader, inboundHeader, stagingHeader, grHeader,\r\n                                    imBasicDataList, preInboundLineList, inboundLineList, stagingLineList, partBarCode);\r\n                        } catch (Exception e) {\r\n                            log.error(\"Error processing ASN Line for ASN: {}\", headerV2.getAsnNumber(), e);\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }, executorService))\r\n                    .collect(Collectors.toList());\r\n\r\n            CompletableFuture<Void> allFutures = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\r\n\r\n            try {\r\n                allFutures.join(); // Wait for all tasks to finish\r\n            } catch (CompletionException e) {\r\n                log.error(\"Exception during ASN line processing: {}\", e.getCause().getMessage());\r\n                throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getCause().getMessage());\r\n            }\r\n\r\n            // Batch Save All Records\r\n            repo.imBasicData1V2Repository.deleteAll(imBasicDataList);\r\n            repo.imBasicData1V2Repository.saveAll(imBasicDataList);\r\n            repo.preInboundLineV2Repository.saveAll(preInboundLineList);\r\n            repo.inboundLineV2Repository.saveAll(inboundLineList);\r\n            repo.stagingLineV2Repository.saveAll(stagingLineList);\r\n\r\n        } catch (Exception e) {\r\n            log.error(\"Error processing inbound ASN Lines\", e);\r\n            throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getMessage());\r\n        } finally {\r\n            executorService.shutdown();\r\n        }\r\n        return asnv2;\r\n    }\r\n\r\n    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = {Exception.class, Throwable.class})\r\n    @Retryable(value = {SQLException.class, SQLServerException.class, CannotAcquireLockException.class,\r\n            LockAcquisitionException.class, UnexpectedRollbackException.class}, maxAttempts = 3, backoff = @Backoff(delay = 5000))\r\n    public List<ASNV2> processInboundReceivedV8(List<ASNV2> asnv2List) throws Exception {\r\n\r\n        List<ASNV2> processedAsns = Collections.synchronizedList(new ArrayList<>());\r\n        log.info(\"Inbound Process Started for {} ASNs\", asnv2List.size());\r\n\r\n        ExecutorService executorService = Executors.newFixedThreadPool(8);\r\n\r\n        try {\r\n            for (ASNV2 asnv2 : asnv2List) {\r\n                ASNHeaderV2 headerV2 = asnv2.getAsnHeader();\r\n                List<ASNLineV2> lineV2List = asnv2.getAsnLine();\r\n                String companyCode = headerV2.getCompanyCode();\r\n                String plantId = headerV2.getBranchCode();\r\n                String mfrName = lineV2List.get(0).getManufacturerName();\r\n\r\n                // Get Warehouse\r\n                Optional<Warehouse> dbWarehouse =\r\n                        repo.warehouseRepository.findByCompanyCodeIdAndPlantIdAndLanguageIdAndDeletionIndicator(companyCode, plantId, \"EN\", 0L);\r\n                String warehouseId = dbWarehouse.get().getWarehouseId();\r\n                String languageId = dbWarehouse.get().getLanguageId();\r\n                log.info(\"Warehouse ID: {}\", warehouseId);\r\n\r\n                // Description_Set\r\n                IKeyValuePair description = repo.stagingLineV2Repository.getDescription(companyCode, languageId, plantId, warehouseId);\r\n                String companyText = description.getCompanyDesc();\r\n                String plantText = description.getPlantDesc();\r\n                String warehouseText = description.getWarehouseDesc();\r\n\r\n                // Getting PreInboundNo from NumberRangeTable\r\n                String preInboundNo = getPreInboundNo(warehouseId, companyCode, plantId, languageId);\r\n\r\n                // Step 1: Create headers before line processing\r\n                PreInboundHeaderEntityV2 preInboundHeader = createPreInboundHeaderV8(\r\n                        companyCode, languageId, plantId, preInboundNo, headerV2, warehouseId, companyText, plantText, warehouseText, mfrName);\r\n                log.info(\"PreInboundHeader created: {}\", preInboundHeader.getPreInboundNo());\r\n\r\n                InboundHeaderV2 inboundHeader = createInboundHeaderV8(preInboundHeader, companyText, plantText, warehouseText, lineV2List.size());\r\n                log.info(\"Inbound Header Created: {}\", inboundHeader);\r\n\r\n                StagingHeaderV2 stagingHeader = createStagingHeaderV8(preInboundHeader, companyText, plantText, warehouseText);\r\n                log.info(\"StagingHeader Created: {}\", stagingHeader);\r\n\r\n                GrHeaderV2 grHeader = createGrHeaderV8(preInboundHeader, stagingHeader);\r\n                log.info(\"GrHeader Created: {}\", grHeader);\r\n\r\n                // Collections for batch saving\r\n                List<ImBasicData1V2> imBasicDataList = Collections.synchronizedList(new ArrayList<>());\r\n                List<PreInboundLineEntityV2> preInboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n                List<InboundLineV2> inboundLineList = Collections.synchronizedList(new ArrayList<>());\r\n                List<StagingLineEntityV2> stagingLineList = Collections.synchronizedList(new ArrayList<>());\r\n\r\n                // Process lines in parallel\r\n                List<CompletableFuture<Void>> futures = lineV2List.stream()\r\n                        .map(asnLineV2 -> CompletableFuture.runAsync(() -> {\r\n                            try {\r\n                                processSingleASNLineV8(asnv2, asnLineV2, preInboundHeader, inboundHeader, stagingHeader, grHeader,\r\n                                        imBasicDataList, preInboundLineList, inboundLineList, stagingLineList);\r\n                            } catch (Exception e) {\r\n                                log.error(\"Error processing ASN Line for ASN: {}\", headerV2.getAsnNumber(), e);\r\n                                throw new RuntimeException(e);\r\n                            }\r\n                        }, executorService))\r\n                        .collect(Collectors.toList());\r\n\r\n                CompletableFuture<Void> allFutures = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\r\n\r\n                try {\r\n                    allFutures.join(); // Wait for all tasks to finish\r\n                } catch (CompletionException e) {\r\n                    log.error(\"Exception during ASN line processing: {}\", e.getCause().getMessage());\r\n                    throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getCause().getMessage());\r\n                }\r\n\r\n                // Batch Save All Records\r\n                imBasicData1V2Repository.saveAll(imBasicDataList);\r\n                preInboundLineV2Repository.saveAll(preInboundLineList);\r\n                inboundLineV2Repository.saveAll(inboundLineList);\r\n                stagingLineV2Repository.saveAll(stagingLineList);\r\n\r\n                processedAsns.add(asnv2);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Error processing inbound ASN Lines\", e);\r\n            throw new BadRequestException(\"Inbound Order Processing failed: \" + e.getMessage());\r\n        } finally {\r\n            executorService.shutdown();\r\n        }\r\n        log.info(\"Inbound Process Completed for {} ASNs\", processedAsns.size());\r\n        return processedAsns;\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     */\r\n    private String getPreInboundNo(String warehouseId, String companyCodeId, String plantId, String languageId) {\r\n        /*\r\n         * Pass WH_ID - User logged in WH_ID and NUM_RAN_CODE = 2 values in NUMBERRANGE table and\r\n         * fetch NUM_RAN_CURRENT value of FISCALYEAR = CURRENT YEAR and add +1and then\r\n         * update in PREINBOUNDHEADER table\r\n         */\r\n        try {\r\n            AuthToken authTokenForIDMasterService = authTokenService.getIDMasterServiceAuthToken();\r\n            String nextRangeNumber = getNextRangeNumber(2L, companyCodeId, plantId, languageId, warehouseId, authTokenForIDMasterService.getAccess_token());\r\n            return nextRangeNumber;\r\n        } catch (Exception e) {\r\n            throw new BadRequestException(\"Error on Number generation.\" + e.toString());\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @param companyId\r\n     * @param languageId\r\n     * @param plantId\r\n     * @param preInboundNo\r\n     * @param asnHeaderV2\r\n     * @param warehouseId\r\n     * @param companyText\r\n     * @param plantText\r\n     * @param warehouseText\r\n     * @param mfrName\r\n     * @return\r\n     */\r\n    private PreInboundHeaderEntityV2 createPreInboundHeaderV2(String companyId, String languageId, String plantId, String preInboundNo, ASNHeaderV2 asnHeaderV2,\r\n                                                              String warehouseId, String companyText, String plantText, String warehouseText, String mfrName) {\r\n        PreInboundHeaderEntityV2 preInboundHeader = new PreInboundHeaderEntityV2();\r\n        BeanUtils.copyProperties(asnHeaderV2, preInboundHeader, CommonUtils.getNullPropertyNames(asnHeaderV2));\r\n        preInboundHeader.setLanguageId(languageId);                                    // LANG_ID\r\n        preInboundHeader.setWarehouseId(warehouseId);\r\n        preInboundHeader.setCompanyCode(companyId);\r\n        preInboundHeader.setPlantId(plantId);\r\n        preInboundHeader.setRefDocNumber(asnHeaderV2.getAsnNumber());\r\n        preInboundHeader.setPreInboundNo(preInboundNo);                                                // PRE_IB_NO\r\n        preInboundHeader.setReferenceDocumentType(\"Supplier Invoice\");    // REF_DOC_TYP - Hard Coded Value \"ASN\"\r\n        preInboundHeader.setInboundOrderTypeId(1L);    // IB_ORD_TYP_ID\r\n        preInboundHeader.setRefDocDate(new Date());                // REF_DOC_DATE\r\n        preInboundHeader.setTransferRequestType(\"Supplier Invoice\");\r\n        preInboundHeader.setStatusId(5L);\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(5L, languageId);\r\n        preInboundHeader.setStatusDescription(statusDescription);\r\n        preInboundHeader.setCompanyDescription(companyText);\r\n        preInboundHeader.setPlantDescription(plantText);\r\n        preInboundHeader.setWarehouseDescription(warehouseText);\r\n        preInboundHeader.setMiddlewareId(String.valueOf(asnHeaderV2.getMiddlewareId()));\r\n        preInboundHeader.setMiddlewareTable(asnHeaderV2.getMiddlewareTable());\r\n        preInboundHeader.setManufacturerFullName(mfrName);\r\n\r\n        preInboundHeader.setTransferOrderDate(new Date());\r\n        preInboundHeader.setSourceBranchCode(asnHeaderV2.getBranchCode());\r\n        preInboundHeader.setSourceCompanyCode(asnHeaderV2.getCompanyCode());\r\n        preInboundHeader.setMUpdatedOn(asnHeaderV2.getUpdatedOn());\r\n\r\n        preInboundHeader.setDeletionIndicator(0L);\r\n        preInboundHeader.setCreatedBy(\"MW_AMS\");\r\n        preInboundHeader.setCreatedOn(new Date());\r\n        PreInboundHeaderEntityV2 createdPreInboundHeader = repo.preInboundHeaderV2Repository.save(preInboundHeader);\r\n        log.info(\"createdPreInboundHeader : \" + createdPreInboundHeader);\r\n        return createdPreInboundHeader;\r\n    }\r\n\r\n    /**\r\n     * @param companyId\r\n     * @param languageId\r\n     * @param plantId\r\n     * @param preInboundNo\r\n     * @param asnHeaderV2\r\n     * @param warehouseId\r\n     * @return\r\n     * @throws ParseException\r\n     */\r\n    private PreInboundHeaderEntityV2 createPreInboundHeaderV8(String companyId, String languageId, String plantId, String preInboundNo, ASNHeaderV2 asnHeaderV2,\r\n                                                              String warehouseId, String companyText, String plantText, String warehouseText, String mfrName) {\r\n        PreInboundHeaderEntityV2 preInboundHeader = new PreInboundHeaderEntityV2();\r\n        BeanUtils.copyProperties(asnHeaderV2, preInboundHeader, CommonUtils.getNullPropertyNames(asnHeaderV2));\r\n        preInboundHeader.setLanguageId(languageId);                                    // LANG_ID\r\n        preInboundHeader.setWarehouseId(warehouseId);\r\n        preInboundHeader.setCompanyCode(companyId);\r\n        preInboundHeader.setPlantId(plantId);\r\n        preInboundHeader.setRefDocNumber(asnHeaderV2.getAsnNumber());\r\n        preInboundHeader.setPreInboundNo(preInboundNo);                                                // PRE_IB_NO\r\n        preInboundHeader.setReferenceDocumentType(\"Supplier Invoice\");    // REF_DOC_TYP - Hard Coded Value \"ASN\"\r\n        preInboundHeader.setInboundOrderTypeId(1L);    // IB_ORD_TYP_ID\r\n        preInboundHeader.setRefDocDate(new Date());                // REF_DOC_DATE\r\n        preInboundHeader.setTransferRequestType(\"Supplier Invoice\");\r\n        preInboundHeader.setStatusId(5L);\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(5L, languageId);\r\n        preInboundHeader.setStatusDescription(statusDescription);\r\n        preInboundHeader.setCompanyDescription(companyText);\r\n        preInboundHeader.setPlantDescription(plantText);\r\n        preInboundHeader.setWarehouseDescription(warehouseText);\r\n        preInboundHeader.setMiddlewareId(String.valueOf(asnHeaderV2.getMiddlewareId()));\r\n        preInboundHeader.setMiddlewareTable(asnHeaderV2.getMiddlewareTable());\r\n        preInboundHeader.setManufacturerFullName(mfrName);\r\n\r\n        preInboundHeader.setTransferOrderDate(new Date());\r\n        preInboundHeader.setSourceBranchCode(asnHeaderV2.getBranchCode());\r\n        preInboundHeader.setSourceCompanyCode(asnHeaderV2.getCompanyCode());\r\n        preInboundHeader.setIsCompleted(asnHeaderV2.getIsCompleted());\r\n        preInboundHeader.setIsCancelled(asnHeaderV2.getIsCancelled());\r\n        preInboundHeader.setMUpdatedOn(asnHeaderV2.getUpdatedOn());\r\n\r\n        preInboundHeader.setDeletionIndicator(0L);\r\n        preInboundHeader.setCreatedBy(\"MW_AMS\");\r\n        preInboundHeader.setCreatedOn(new Date());\r\n        DataBaseContextHolder.clear();\r\n        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", DataBaseContextHolder.getCurrentDb());\r\n//        String routingDb = dbConfigRepository.getDbName(companyId, plantId, warehouseId);\r\n//        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(routingDb);\r\n        PreInboundHeaderEntityV2 createdPreInboundHeader = preInboundHeaderV2Repository.save(preInboundHeader);\r\n        log.info(\"createdPreInboundHeader : \" + createdPreInboundHeader);\r\n        return createdPreInboundHeader;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @param preInboundHeader\r\n     * @param stagingNo\r\n     * @return\r\n     */\r\n    public StagingHeaderV2 createStagingHeaderV2(PreInboundHeaderEntityV2 preInboundHeader, String stagingNo) throws Exception {\r\n        try {\r\n            StagingHeaderV2 stagingHeader = new StagingHeaderV2();\r\n            BeanUtils.copyProperties(preInboundHeader, stagingHeader, CommonUtils.getNullPropertyNames(preInboundHeader));\r\n            stagingHeader.setStagingNo(stagingNo);\r\n            stagingHeader.setGrMtd(\"INTEGRATION\");\r\n            return stagingHeader;\r\n        } catch (Exception e) {\r\n            log.error(\"Exception while StagingHeader Create : \" + e.toString());\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param preInboundHeader\r\n     * @return\r\n     */\r\n    private InboundHeaderV2 createInboundHeader(PreInboundHeaderEntityV2 preInboundHeader, int lineSize) throws Exception {\r\n        try {\r\n            InboundHeaderV2 inboundHeader = new InboundHeaderV2();\r\n            BeanUtils.copyProperties(preInboundHeader, inboundHeader, CommonUtils.getNullPropertyNames(preInboundHeader));\r\n            inboundHeader.setCountOfOrderLines((long) lineSize);       //count of lines\r\n//            return inboundHeaderV2Repository.save(inboundHeader);\r\n            return inboundHeader;\r\n        } catch (Exception e) {\r\n            log.error(\"Exception while InboundHeader Create : \" + e.toString());\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param preInboundHeader\r\n     * @param companyText\r\n     * @param plantText\r\n     * @param warehouseText\r\n     * @return\r\n     */\r\n    private InboundHeaderV2 createInboundHeaderV8(PreInboundHeaderEntityV2 preInboundHeader, String companyText, String plantText, String warehouseText, int lineSize) {\r\n        InboundHeaderV2 inboundHeader = new InboundHeaderV2();\r\n        BeanUtils.copyProperties(preInboundHeader, inboundHeader, CommonUtils.getNullPropertyNames(preInboundHeader));\r\n        inboundHeader.setStatusId(5L);\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(5L, preInboundHeader.getLanguageId());\r\n        inboundHeader.setStatusDescription(statusDescription);\r\n        inboundHeader.setCompanyDescription(companyText);\r\n        inboundHeader.setPlantDescription(plantText);\r\n        inboundHeader.setWarehouseDescription(warehouseText);\r\n        inboundHeader.setCountOfOrderLines((long) lineSize);       //count of lines\r\n        inboundHeader.setDeletionIndicator(0L);\r\n        DataBaseContextHolder.clear();\r\n        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n//        String routingDb = dbConfigRepository.getDbName(inboundHeader.getCompanyCode(), inboundHeader.getPlantId(), inboundHeader.getWarehouseId());\r\n//        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(routingDb);\r\n\r\n//        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", DataBaseContextHolder.getCurrentDb());\r\n        InboundHeaderV2 createdInboundHeader = inboundHeaderV2Repository.save(inboundHeader);\r\n        log.info(\"createdInboundHeader : \" + createdInboundHeader);\r\n        return createdInboundHeader;\r\n    }\r\n\r\n    /**\r\n     * @param preInboundHeaderEntityV2\r\n     * @param stagingHeaderV2\r\n     * @return\r\n     * @throws java.text.ParseException\r\n     * @throws InvocationTargetException\r\n     * @throws IllegalAccessException\r\n     */\r\n    public GrHeaderV2 createGrHeaderV8(PreInboundHeaderEntityV2 preInboundHeaderEntityV2, StagingHeaderV2 stagingHeaderV2) throws java.text.ParseException, InvocationTargetException, IllegalAccessException {\r\n\r\n        GrHeaderV2 addGrHeader = new GrHeaderV2();\r\n        BeanUtils.copyProperties(stagingHeaderV2, addGrHeader, CommonUtils.getNullPropertyNames(stagingHeaderV2));\r\n\r\n        // GR_NO\r\n        AuthToken authTokenForIDMasterService = repo.authTokenService.getIDMasterServiceAuthToken();\r\n        long NUM_RAN_CODE = 5;\r\n        String nextGRHeaderNumber = getNextRangeNumber(NUM_RAN_CODE, stagingHeaderV2.getCompanyCode(),\r\n                stagingHeaderV2.getPlantId(), stagingHeaderV2.getLanguageId(), stagingHeaderV2.getWarehouseId(),\r\n                authTokenForIDMasterService.getAccess_token());\r\n        addGrHeader.setGoodsReceiptNo(nextGRHeaderNumber);\r\n\r\n        String caseCode = getNextRangeNumber(4L, stagingHeaderV2.getCompanyCode(),\r\n                stagingHeaderV2.getPlantId(), stagingHeaderV2.getLanguageId(), stagingHeaderV2.getWarehouseId(),\r\n                authTokenForIDMasterService.getAccess_token());\r\n        if (caseCode == null || caseCode.isEmpty()) {\r\n            throw new BadRequestException(\"CaseCode is not generated.\");\r\n        }\r\n\r\n        addGrHeader.setCaseCode(caseCode);\r\n        addGrHeader.setPalletCode(caseCode);\r\n        addGrHeader.setMiddlewareId(stagingHeaderV2.getMiddlewareId());\r\n        addGrHeader.setMiddlewareTable(stagingHeaderV2.getMiddlewareTable());\r\n        addGrHeader.setReferenceDocumentType(stagingHeaderV2.getReferenceDocumentType());\r\n        addGrHeader.setManufacturerFullName(stagingHeaderV2.getManufacturerFullName());\r\n        addGrHeader.setManufacturerName(preInboundHeaderEntityV2.getManufacturerFullName());\r\n        addGrHeader.setTransferOrderDate(preInboundHeaderEntityV2.getTransferOrderDate());\r\n        addGrHeader.setIsCompleted(stagingHeaderV2.getIsCompleted());\r\n        addGrHeader.setIsCancelled(preInboundHeaderEntityV2.getIsCancelled());\r\n        addGrHeader.setMUpdatedOn(preInboundHeaderEntityV2.getMUpdatedOn());\r\n        addGrHeader.setSourceBranchCode(stagingHeaderV2.getSourceBranchCode());\r\n        addGrHeader.setSourceCompanyCode(preInboundHeaderEntityV2.getSourceCompanyCode());\r\n        addGrHeader.setCustomerCode(stagingHeaderV2.getCustomerCode());\r\n        addGrHeader.setTransferRequestType(stagingHeaderV2.getTransferRequestType());\r\n\r\n        // STATUS_ID\r\n        addGrHeader.setStatusId(16L);\r\n        statusDescription = stagingLineV2Repository.getStatusDescription(16L, stagingHeaderV2.getLanguageId());\r\n        addGrHeader.setStatusDescription(statusDescription);\r\n\r\n        addGrHeader.setDeletionIndicator(0L);\r\n        addGrHeader.setCreatedOn(new Date());\r\n        addGrHeader.setUpdatedOn(new Date());\r\n\r\n//        String routingDb = dbConfigRepository.getDbName(addGrHeader.getCompanyCode(), addGrHeader.getPlantId(), addGrHeader.getWarehouseId());\r\n//        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(routingDb);\r\n\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", DataBaseContextHolder.getCurrentDb());\r\n        return grHeaderV2Repository.save(addGrHeader);\r\n    }\r\n\r\n    /**\r\n     * To avoid Deadlock\r\n     *\r\n     * @param preInboundHeader\r\n     * @return\r\n     */\r\n    public StagingHeaderV2 createStagingHeaderV8(PreInboundHeaderEntityV2 preInboundHeader, String companyText, String plantText, String warehouseText) {\r\n\r\n        StagingHeaderV2 stagingHeader = new StagingHeaderV2();\r\n        BeanUtils.copyProperties(preInboundHeader, stagingHeader, CommonUtils.getNullPropertyNames(preInboundHeader));\r\n\r\n        // STG_NO\r\n        AuthToken authTokenForIDMasterService = repo.authTokenService.getIDMasterServiceAuthToken();\r\n\r\n        long NUMBER_RANGE_CODE = 3;\r\n        WAREHOUSEID_NUMBERRANGE = preInboundHeader.getWarehouseId();\r\n        String nextRangeNumber = getNextRangeNumber(NUMBER_RANGE_CODE,\r\n                preInboundHeader.getCompanyCode(), preInboundHeader.getPlantId(), preInboundHeader.getLanguageId(), WAREHOUSEID_NUMBERRANGE,\r\n                authTokenForIDMasterService.getAccess_token());\r\n        stagingHeader.setStagingNo(nextRangeNumber);\r\n\r\n        // GR_MTD\r\n        stagingHeader.setGrMtd(\"INTEGRATION\");\r\n\r\n        // STATUS_ID\r\n        stagingHeader.setStatusId(14L);\r\n        statusDescription = stagingLineV2Repository.getStatusDescription(14L, preInboundHeader.getLanguageId());\r\n        stagingHeader.setStatusDescription(statusDescription);\r\n        stagingHeader.setCompanyDescription(companyText);\r\n        stagingHeader.setPlantDescription(plantText);\r\n        stagingHeader.setWarehouseDescription(warehouseText);\r\n\r\n//        String routingDb = dbConfigRepository.getDbName(stagingHeader.getCompanyCode(), stagingHeader.getPlantId(), stagingHeader.getWarehouseId());\r\n//        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(routingDb);\r\n\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", DataBaseContextHolder.getCurrentDb());\r\n        return stagingHeaderV2Repository.save(stagingHeader);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @param stagingHeader\r\n     * @param caseCode\r\n     * @param grNumber\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public GrHeaderV2 createGrHeader(StagingHeaderV2 stagingHeader, String caseCode, String grNumber) throws Exception {\r\n        try {\r\n            GrHeaderV2 grHeader = new GrHeaderV2();\r\n            BeanUtils.copyProperties(stagingHeader, grHeader, CommonUtils.getNullPropertyNames(stagingHeader));\r\n            grHeader.setCaseCode(caseCode);\r\n            grHeader.setPalletCode(caseCode);\r\n            grHeader.setGoodsReceiptNo(grNumber);\r\n            grHeader.setStatusId(16L);\r\n            grHeader.setStatusDescription(getStatusDescription(16L, grHeader.getLanguageId()));\r\n            return repo.grHeaderV2Repository.save(grHeader);\r\n        } catch (Exception e) {\r\n            log.error(\"Exception while GrHeader Create : \" + e.toString());\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    //ProcessSingleAsnLine\r\n    private void processSingleASNLine(ASNV2 asnv2, ASNLineV2 asnLineV2, PreInboundHeaderEntityV2 preInboundHeader,\r\n                                      InboundHeaderV2 inboundHeader, StagingHeaderV2 stagingHeader, GrHeaderV2 grHeaderV2,\r\n                                      List<ImBasicData1V2> imBasicDataList, List<PreInboundLineEntityV2> preInboundLineList,\r\n                                      List<InboundLineV2> inboundLineList, List<StagingLineEntityV2> stagingLineList, String partBarCode) throws Exception {\r\n\r\n        asnLineV2.setManufacturerCode(MFR_NAME);\r\n        asnLineV2.setManufacturerName(MFR_NAME);\r\n        asnLineV2.setManufacturerFullName(MFR_NAME);\r\n        if (asnLineV2.getExpectedQtyInCases() != null && asnLineV2.getExpectedQtyInPieces() != null) {\r\n            Double ordQty = asnLineV2.getExpectedQtyInPieces() / asnLineV2.getExpectedQtyInCases();  // 50 / 2 => 25\r\n            asnLineV2.setExpectedQty(ordQty);     // 25\r\n//            asnLineV2.setOrderedQty(ordQty);      // 25\r\n            asnLineV2.setBagSize(ordQty);         // 25\r\n        } else {\r\n            Double ordQty = asnLineV2.getExpectedQty() / asnLineV2.getNoBags();  // 50 / 2 => 25\r\n            asnLineV2.setExpectedQty(ordQty);     // 25\r\n//            asnLineV2.setOrderedQty(ordQty);      // 25\r\n            asnLineV2.setBagSize(ordQty);         // 25\r\n        }\r\n        asnLineV2.setNoBags(asnLineV2.getExpectedQtyInCases());\r\n        asnLineV2.setSupplierInvoiceNo(asnLineV2.getSupplierInvoiceNo());\r\n\r\n        ASNHeaderV2 headerV2 = asnv2.getAsnHeader();\r\n        String companyCode = headerV2.getCompanyCode();\r\n        String plantId = headerV2.getBranchCode();\r\n        String warehouseId = preInboundHeader.getWarehouseId();\r\n        String languageId = preInboundHeader.getLanguageId();\r\n        String itemText = null;\r\n\r\n        // Check and collect IMBASICDATA1\r\n        DataBaseContextHolder.setCurrentDb(\"NAMRATHA\");\r\n        ImBasicData1V2 imBasicData1 = repo.imBasicData1V2Repository.findByLanguageIdAndCompanyCodeIdAndPlantIdAndWarehouseIdAndItemCodeAndManufacturerPartNoAndDeletionIndicator(\r\n                languageId, companyCode, plantId, warehouseId,\r\n                asnLineV2.getSku().trim(), asnLineV2.getManufacturerName(), 0L);\r\n        log.info(\"ImBasicData1 Values {} \", imBasicData1);\r\n        if (imBasicData1 == null) {\r\n            imBasicData1 = new ImBasicData1V2();\r\n            imBasicData1.setLanguageId(languageId);\r\n            imBasicData1.setWarehouseId(warehouseId);\r\n            imBasicData1.setCompanyCodeId(companyCode);\r\n            imBasicData1.setPlantId(plantId);\r\n            imBasicData1.setItemCode(asnLineV2.getSku());\r\n            imBasicData1.setUomId(asnLineV2.getUom());\r\n            imBasicData1.setDescription(asnLineV2.getSkuDescription());\r\n            imBasicData1.setManufacturerPartNo(asnLineV2.getManufacturerName());\r\n            imBasicData1.setManufacturerName(asnLineV2.getManufacturerName());\r\n            imBasicData1.setCapacityCheck(false);\r\n            imBasicData1.setDeletionIndicator(0L);\r\n            imBasicData1.setStatusId(1L);\r\n            imBasicDataList.add(imBasicData1);\r\n        } else {\r\n            itemText = imBasicData1.getDescription();\r\n        }\r\n\r\n        // Collect PreInboundLine\r\n        List<PreInboundLineEntityV2> preInboundLine = createPreInboundLineV2(companyCode, plantId, languageId,\r\n                preInboundHeader.getPreInboundNo(), headerV2, asnLineV2, warehouseId, preInboundHeader.getCompanyDescription(),\r\n                preInboundHeader.getPlantDescription(), preInboundHeader.getWarehouseDescription(), partBarCode, itemText);\r\n        preInboundLineList.addAll(preInboundLine);\r\n\r\n        // Collect InboundLine\r\n        List<InboundLineV2> inboundLineV2 = createInboundLines(17L, statusDescription, preInboundLine);\r\n        inboundLineList.addAll(inboundLineV2);\r\n\r\n        // Collect StagingLine\r\n        List<StagingLineEntityV2> stagingLine = createStagingLineV2(preInboundLine, grHeaderV2, stagingHeader);\r\n        stagingLineList.addAll(stagingLine);\r\n    }\r\n\r\n    //ProcessSingleAsnLine\r\n    private void processSingleASNLineV8(ASNV2 asnv2, ASNLineV2 asnLineV2, PreInboundHeaderEntityV2 preInboundHeader,\r\n                                      InboundHeaderV2 inboundHeader, StagingHeaderV2 stagingHeader, GrHeaderV2 grHeaderV2,\r\n                                      List<ImBasicData1V2> imBasicDataList, List<PreInboundLineEntityV2> preInboundLineList,\r\n                                      List<InboundLineV2> inboundLineList, List<StagingLineEntityV2> stagingLineList) throws Exception {\r\n\r\n        ASNHeaderV2 headerV2 = asnv2.getAsnHeader();\r\n        String companyCode = headerV2.getCompanyCode();\r\n        String plantId = headerV2.getBranchCode();\r\n        String warehouseId = preInboundHeader.getWarehouseId();\r\n        String languageId = preInboundHeader.getLanguageId();\r\n\r\n        // Check and collect IMBASICDATA1\r\n        DataBaseContextHolder.clear();\r\n        DataBaseContextHolder.setCurrentDb(\"FAHAHEEL\");\r\n\r\n//        String routingDb = dbConfigRepository.getDbName(companyCode, plantId, warehouseId);\r\n//        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n//        DataBaseContextHolder.clear();\r\n//        DataBaseContextHolder.setCurrentDb(routingDb);\r\n\r\n        log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", DataBaseContextHolder.getCurrentDb());\r\n        ImBasicData1V2 imBasicData1 = imBasicData1V2Repository.findByLanguageIdAndCompanyCodeIdAndPlantIdAndWarehouseIdAndItemCodeAndManufacturerPartNoAndDeletionIndicator(\r\n                languageId, companyCode, plantId, warehouseId, asnLineV2.getSku(), asnLineV2.getManufacturerName(), 0L);\r\n\r\n        if (imBasicData1 == null) {\r\n            imBasicData1 = new ImBasicData1V2();\r\n            imBasicData1.setLanguageId(languageId);\r\n            imBasicData1.setWarehouseId(warehouseId);\r\n            imBasicData1.setCompanyCodeId(companyCode);\r\n            imBasicData1.setPlantId(plantId);\r\n            imBasicData1.setItemCode(asnLineV2.getSku());\r\n            imBasicData1.setUomId(asnLineV2.getUom());\r\n            imBasicData1.setDescription(asnLineV2.getSkuDescription());\r\n            imBasicData1.setManufacturerPartNo(asnLineV2.getManufacturerName());\r\n            imBasicData1.setManufacturerName(asnLineV2.getManufacturerName());\r\n            imBasicData1.setCapacityCheck(false);\r\n            imBasicData1.setDeletionIndicator(0L);\r\n            imBasicData1.setStatusId(1L);\r\n            imBasicDataList.add(imBasicData1); // Collect for batch save\r\n        }\r\n\r\n        // Collect PreInboundLine\r\n        PreInboundLineEntityV2 preInboundLine = createPreInboundLineV8(companyCode, plantId, languageId, preInboundHeader.getPreInboundNo(), headerV2,\r\n                asnLineV2, warehouseId, preInboundHeader.getCompanyDescription(), preInboundHeader.getPlantDescription(), preInboundHeader.getWarehouseDescription());\r\n        preInboundLineList.add(preInboundLine);\r\n\r\n        // Collect InboundLine\r\n        InboundLineV2 inboundLineV2 = createInboundLineV8(preInboundLine, inboundHeader);\r\n        inboundLineList.add(inboundLineV2);\r\n\r\n        // Collect StagingLine\r\n        StagingLineEntityV2 stagingLine = createStagingLineV8(preInboundLine, stagingHeader, grHeaderV2);\r\n        stagingLineList.add(stagingLine);\r\n    }\r\n\r\n    /**\r\n     * @param preInboundLine\r\n     * @param preInboundHeader\r\n     * @return\r\n     */\r\n    public InboundLineV2 createInboundLineV8(PreInboundLineEntityV2 preInboundLine, InboundHeaderV2 preInboundHeader) {\r\n\r\n        InboundLineV2 inboundLine = new InboundLineV2();\r\n        BeanUtils.copyProperties(preInboundLine, inboundLine, CommonUtils.getNullPropertyNames(preInboundLine));\r\n\r\n        inboundLine.setOrderQty(preInboundLine.getOrderQty());\r\n        inboundLine.setOrderUom(preInboundLine.getOrderUom());\r\n        inboundLine.setDescription(preInboundLine.getItemDescription());\r\n        inboundLine.setVendorCode(preInboundLine.getBusinessPartnerCode());\r\n        inboundLine.setReferenceField4(preInboundLine.getReferenceField4());\r\n        inboundLine.setCompanyDescription(preInboundLine.getCompanyDescription());\r\n        inboundLine.setPlantDescription(preInboundLine.getPlantDescription());\r\n        inboundLine.setWarehouseDescription(preInboundLine.getWarehouseDescription());\r\n        inboundLine.setStatusId(14L);\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(14L, inboundLine.getLanguageId());\r\n        inboundLine.setStatusDescription(statusDescription);\r\n        inboundLine.setContainerNo(preInboundLine.getContainerNo());\r\n        inboundLine.setSupplierName(preInboundLine.getSupplierName());\r\n        inboundLine.setMiddlewareId(preInboundLine.getMiddlewareId());\r\n        inboundLine.setMiddlewareHeaderId(preInboundLine.getMiddlewareHeaderId());\r\n        inboundLine.setMiddlewareTable(preInboundLine.getMiddlewareTable());\r\n        inboundLine.setReferenceDocumentType(preInboundLine.getReferenceDocumentType());\r\n        inboundLine.setManufacturerFullName(preInboundLine.getManufacturerFullName());\r\n        inboundLine.setPurchaseOrderNumber(preInboundLine.getPurchaseOrderNumber());\r\n        inboundLine.setManufacturerCode(preInboundLine.getManufacturerName());\r\n        inboundLine.setManufacturerName(preInboundLine.getManufacturerName());\r\n        inboundLine.setExpectedArrivalDate(preInboundLine.getExpectedArrivalDate());\r\n        inboundLine.setBranchCode(preInboundLine.getBranchCode());\r\n        inboundLine.setTransferOrderNo(preInboundLine.getTransferOrderNo());\r\n        inboundLine.setIsCompleted(preInboundLine.getIsCompleted());\r\n        inboundLine.setSourceCompanyCode(preInboundHeader.getSourceCompanyCode());\r\n        inboundLine.setSourceBranchCode(preInboundHeader.getSourceBranchCode());\r\n        inboundLine.setDeletionIndicator(0L);\r\n        inboundLine.setCreatedBy(preInboundHeader.getCreatedBy());\r\n        inboundLine.setCreatedOn(preInboundHeader.getCreatedOn());\r\n//        inboundLineV2Repository.save(inboundLine);\r\n        return inboundLine;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @param preInboundNo\r\n     * @param asnHeaderV2\r\n     * @param asnLineV2\r\n     * @param warehouseId\r\n     * @return\r\n     * @throws ParseException\r\n     */\r\n    private List<PreInboundLineEntityV2> createPreInboundLineV2(String companyCode, String plantId, String languageId, String preInboundNo, ASNHeaderV2 asnHeaderV2,\r\n                                                                ASNLineV2 asnLineV2, String warehouseId, String companyText, String plantText, String warehouseText,\r\n                                                                String partBarCode, String itemText) {\r\n\r\n        List<PreInboundLineEntityV2> preInboundLineEntityV2List = new ArrayList<>();\r\n        double noOfBags = asnLineV2.getNoBags() != null ? asnLineV2.getNoBags() : 1L;\r\n        log.info(\"no of bag size {} ------> \", noOfBags);\r\n\r\n        List<ImPartner> imPartnerList = new ArrayList<>();\r\n        Long lineNumber = 1L;\r\n        for (long i = 1; i <= noOfBags; i++) {\r\n            PreInboundLineEntityV2 preInboundLine = new PreInboundLineEntityV2();\r\n            String barcodeId = \"\";\r\n            try {\r\n                if (asnHeaderV2.getSupplierCode() != null && asnHeaderV2.getSupplierCode().equalsIgnoreCase(\"EVEREST FOOD PRODUCTS PVT LTD\")) {\r\n                    //barcodeId = null;\r\n                    barcodeId = \"10000\" + asnLineV2.getSku();\r\n                } else {\r\n                    barcodeId = generateBarCodeId(asnLineV2.getSku(), partBarCode, i);\r\n                }\r\n                preInboundLine.setBarcodeId(barcodeId);\r\n\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(\"Failed to generate barcode for item code: \"\r\n                        + asnLineV2.getSku(), e);\r\n            }\r\n            ImPartner imPartner = createImpartner(companyCode, plantId, languageId, warehouseId, asnLineV2.getSku(),\r\n                    asnLineV2.getManufacturerName(), barcodeId, MW_AMS);\r\n            imPartnerList.add(imPartner);\r\n            preInboundLine.setLanguageId(languageId);\r\n            preInboundLine.setCompanyCode(companyCode);\r\n            preInboundLine.setPlantId(plantId);\r\n            preInboundLine.setWarehouseId(warehouseId);\r\n            preInboundLine.setRefDocNumber(asnHeaderV2.getAsnNumber());\r\n            preInboundLine.setInboundOrderTypeId(1L);\r\n            preInboundLine.setNoBags(1D);\r\n            // STCK_TYP_ID\r\n            preInboundLine.setStockTypeId(1L);\r\n            preInboundLine.setStockTypeDescription(getStockTypeDesc(companyCode, plantId, languageId, warehouseId, preInboundLine.getStockTypeId()));\r\n\r\n            preInboundLine.setTransferRequestType(\"Supplier Invoice\");\r\n            preInboundLine.setPreInboundNo(preInboundNo);\r\n            preInboundLine.setLineNo(lineNumber);\r\n            preInboundLine.setItemCode(asnLineV2.getSku());\r\n            preInboundLine.setItemDescription(itemText);\r\n            preInboundLine.setManufacturerPartNo(asnLineV2.getManufacturerName());\r\n            preInboundLine.setBusinessPartnerCode(asnHeaderV2.getSupplierCode());\r\n            preInboundLine.setOrderQty(asnLineV2.getExpectedQty());\r\n            preInboundLine.setOrderUom(asnLineV2.getUom());\r\n            preInboundLine.setBagSize(asnLineV2.getBagSize());\r\n            preInboundLine.setSpecialStockIndicatorId(1L);\r\n            log.info(\"inboundIntegrationLine.getExpectedDate() : \" + asnLineV2.getExpectedDate());\r\n            preInboundLine.setExpectedArrivalDate(getExpectedDate(asnLineV2.getExpectedDate()));\r\n            preInboundLine.setItemCaseQty(asnLineV2.getPackQty());\r\n            preInboundLine.setStatusId(5L);\r\n            statusDescription = stagingLineV2Repository.getStatusDescription(5L, languageId);\r\n            preInboundLine.setStatusDescription(statusDescription);\r\n            preInboundLine.setCompanyDescription(companyText);\r\n            preInboundLine.setPlantDescription(plantText);\r\n            preInboundLine.setWarehouseDescription(warehouseText);\r\n            preInboundLine.setOrigin(asnLineV2.getOrigin());\r\n            preInboundLine.setBrandName(asnLineV2.getBrand());\r\n            preInboundLine.setManufacturerCode(asnLineV2.getManufacturerName());\r\n            preInboundLine.setPartnerItemNo(asnHeaderV2.getSupplierCode());\r\n            preInboundLine.setContainerNo(asnLineV2.getContainerNumber());\r\n            // REF_FIELD_2\r\n            preInboundLine.setTransferOrderNo(asnHeaderV2.getAsnNumber());\r\n            preInboundLine.setIsCompleted(asnLineV2.getIsCompleted());\r\n\r\n            preInboundLine.setDeletionIndicator(0L);\r\n            preInboundLine.setCreatedBy(\"MW_AMS\");\r\n            preInboundLine.setCreatedOn(new Date());\r\n\r\n            log.info(\"preInboundLine : \" + preInboundLine);\r\n            lineNumber++;\r\n            preInboundLineEntityV2List.add(preInboundLine);\r\n        }\r\n        if (!imPartnerList.isEmpty()) {\r\n            repo.imPartnerRepository.saveAll(imPartnerList);\r\n        }\r\n        return preInboundLineEntityV2List;\r\n    }\r\n\r\n    /**\r\n     * @param preInboundNo\r\n     * @param asnHeaderV2\r\n     * @param asnLineV2\r\n     * @param warehouseId\r\n     * @return\r\n     * @throws ParseException\r\n     */\r\n    private PreInboundLineEntityV2 createPreInboundLineV8(String companyCode, String plantId, String languageId, String preInboundNo, ASNHeaderV2 asnHeaderV2,\r\n                                                          ASNLineV2 asnLineV2, String warehouseId, String companyText, String plantText, String warehouseText) {\r\n        PreInboundLineEntityV2 preInboundLine = new PreInboundLineEntityV2();\r\n\r\n        preInboundLine.setLanguageId(languageId);\r\n        preInboundLine.setCompanyCode(companyCode);\r\n        preInboundLine.setPlantId(plantId);\r\n        preInboundLine.setWarehouseId(warehouseId);\r\n        preInboundLine.setRefDocNumber(asnHeaderV2.getAsnNumber());\r\n        preInboundLine.setInboundOrderTypeId(1L);\r\n//        preInboundLine.setCustomerCode(asnHeaderV2.getCustomerCode());\r\n        preInboundLine.setTransferRequestType(\"Supplier Invoice\");\r\n\r\n        // PRE_IB_NO\r\n        preInboundLine.setPreInboundNo(preInboundNo);\r\n\r\n        // IB__LINE_NO\r\n        preInboundLine.setLineNo(asnLineV2.getLineReference());\r\n\r\n        // ITM_CODE\r\n        preInboundLine.setItemCode(asnLineV2.getSku());\r\n\r\n        // ITEM_TEXT - Pass CHL_ITM_CODE as ITM_CODE in IMBASICDATA1 table and fetch ITEM_TEXT and insert\r\n//        AuthToken authTokenForMastersService = authTokenService.getMastersServiceAuthToken();\r\n        ImBasicData1 imBasicData1 =\r\n                repo.imBasicData1Repository.findByLanguageIdAndCompanyCodeIdAndPlantIdAndWarehouseIdAndItemCodeAndManufacturerPartNoAndDeletionIndicator(\r\n                        languageId, companyCode, plantId, warehouseId, asnLineV2.getSku(), asnLineV2.getManufacturerName(), 0L);\r\n        if (imBasicData1 != null) {\r\n            preInboundLine.setItemDescription(imBasicData1.getDescription());\r\n        }\r\n\r\n        // MFR_PART\r\n        preInboundLine.setManufacturerPartNo(asnLineV2.getManufacturerName());\r\n        // PARTNER_CODE\r\n        preInboundLine.setBusinessPartnerCode(asnLineV2.getSupplierCode());\r\n        // ORD_QTY\r\n        preInboundLine.setOrderQty(asnLineV2.getExpectedQty());\r\n        // ORD_UOM\r\n        preInboundLine.setOrderUom(asnLineV2.getUom());\r\n        // STCK_TYP_ID\r\n        preInboundLine.setStockTypeId(1L);\r\n\r\n        // SP_ST_IND_ID\r\n        preInboundLine.setSpecialStockIndicatorId(1L);\r\n\r\n        // EA_DATE\r\n        log.info(\"inboundIntegrationLine.getExpectedDate() : \" + asnLineV2.getExpectedDate());\r\n        preInboundLine.setExpectedArrivalDate(getExpectedDate(asnLineV2.getExpectedDate()));\r\n        // ITM_CASE_QTY\r\n        preInboundLine.setItemCaseQty(asnLineV2.getPackQty());\r\n        preInboundLine.setStatusId(5L);\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(5L, languageId);\r\n        preInboundLine.setStatusDescription(statusDescription);\r\n\r\n        preInboundLine.setCompanyDescription(companyText);\r\n        preInboundLine.setPlantDescription(plantText);\r\n        preInboundLine.setWarehouseDescription(warehouseText);\r\n        preInboundLine.setOrigin(asnLineV2.getOrigin());\r\n        preInboundLine.setBrandName(asnLineV2.getBrand());\r\n        preInboundLine.setManufacturerCode(asnLineV2.getManufacturerName());\r\n        preInboundLine.setManufacturerName(asnLineV2.getManufacturerName());\r\n        preInboundLine.setPartnerItemNo(asnLineV2.getSupplierCode());\r\n        preInboundLine.setContainerNo(asnLineV2.getContainerNumber());\r\n        preInboundLine.setSupplierName(asnLineV2.getSupplierName());\r\n\r\n        preInboundLine.setMiddlewareId(String.valueOf(asnLineV2.getMiddlewareId()));\r\n        preInboundLine.setMiddlewareHeaderId(String.valueOf(asnLineV2.getMiddlewareHeaderId()));\r\n        preInboundLine.setMiddlewareTable(asnLineV2.getMiddlewareTable());\r\n        preInboundLine.setPurchaseOrderNumber(asnLineV2.getPurchaseOrderNumber());\r\n        preInboundLine.setReferenceDocumentType(\"Supplier Invoice\");\r\n        preInboundLine.setManufacturerFullName(asnLineV2.getManufacturerFullName());\r\n\r\n        preInboundLine.setBranchCode(asnLineV2.getBranchCode());\r\n        preInboundLine.setTransferOrderNo(asnHeaderV2.getAsnNumber());\r\n        preInboundLine.setIsCompleted(asnLineV2.getIsCompleted());\r\n\r\n        preInboundLine.setDeletionIndicator(0L);\r\n        preInboundLine.setCreatedBy(\"MW_AMS\");\r\n        preInboundLine.setCreatedOn(new Date());\r\n\r\n        log.info(\"preInboundLine : \" + preInboundLine);\r\n        return preInboundLine;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @param companyCodeId\r\n     * @param plantId\r\n     * @param languageId\r\n     * @param warehouseId\r\n     * @param itemCode\r\n     * @param manufacturerName\r\n     * @param barcodeId\r\n     * @param loginUserId\r\n     * @return\r\n     */\r\n    private ImPartner createImpartner(String companyCodeId, String plantId, String languageId, String warehouseId,\r\n                                      String itemCode, String manufacturerName, String barcodeId, String loginUserId) {\r\n        ImPartner imPartner = new ImPartner();\r\n        imPartner.setCompanyCodeId(companyCodeId);\r\n        imPartner.setPlantId(plantId);\r\n        imPartner.setLanguageId(languageId);\r\n        imPartner.setWarehouseId(warehouseId);\r\n        imPartner.setItemCode(itemCode);\r\n        imPartner.setManufacturerName(manufacturerName);\r\n        imPartner.setManufacturerCode(manufacturerName);\r\n        imPartner.setBusinessPartnerCode(manufacturerName);\r\n        imPartner.setBusinessPartnerType(\"1\");\r\n        imPartner.setPartnerItemBarcode(barcodeId);\r\n        imPartner.setVendorItemBarcode(barcodeId);\r\n        imPartner.setDeletionIndicator(0L);\r\n        imPartner.setCreatedBy(loginUserId);\r\n        imPartner.setUpdatedBy(loginUserId);\r\n        imPartner.setCreatedOn(new Date());\r\n        imPartner.setUpdatedOn(new Date());\r\n        return imPartner;\r\n    }\r\n\r\n    /**\r\n     * @param statusId\r\n     * @param statusDesc\r\n     * @param preInboundLines\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public List<InboundLineV2> createInboundLines(Long statusId, String statusDesc, List<PreInboundLineEntityV2> preInboundLines) throws Exception {\r\n        try {\r\n            return preInboundLines.stream().map(preInboundLine -> {\r\n                InboundLineV2 inboundLine = new InboundLineV2();\r\n                BeanUtils.copyProperties(preInboundLine, inboundLine, CommonUtils.getNullPropertyNames(preInboundLine));\r\n                inboundLine.setStatusId(statusId);\r\n                inboundLine.setStatusDescription(statusDesc);\r\n                return inboundLine;\r\n            }).collect(toList());\r\n        } catch (Exception e) {\r\n            log.error(\"Exception while InboundLines Create : \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param preInboundLineEntityV2s\r\n     * @param grHeaderV2\r\n     * @return\r\n     */\r\n    List<StagingLineEntityV2> createStagingLineV2(List<PreInboundLineEntityV2> preInboundLineEntityV2s, GrHeaderV2 grHeaderV2, StagingHeaderV2 stagingHeader) {\r\n\r\n        List<StagingLineEntityV2> stagingList = new ArrayList<>();\r\n        preInboundLineEntityV2s.stream().forEach(preInboundLine -> {\r\n            StagingLineEntityV2 stagingLine = new StagingLineEntityV2();\r\n            BeanUtils.copyProperties(preInboundLine, stagingLine, CommonUtils.getNullPropertyNames(preInboundLine));\r\n            stagingLine.setStagingNo(stagingHeader.getStagingNo());\r\n            stagingLine.setCaseCode(grHeaderV2.getCaseCode());\r\n            stagingLine.setPalletCode(grHeaderV2.getCaseCode());\r\n            stagingLine.setPartner_item_barcode(preInboundLine.getBarcodeId());\r\n            stagingLine.setStatusId(14L);\r\n            stagingLine.setStatusDescription(statusDescription);\r\n            stagingLine.setGoodsReceiptNo(grHeaderV2.getGoodsReceiptNo());\r\n\r\n            // Cross_Dock_logic_started\r\n            try {\r\n                log.info(\"Cross Dock logic started\");\r\n                log.info(\"The stagingLine inputs : companyCode --> \" + stagingLine.getCompanyCode() + \" and plantId --> \" + stagingLine.getPlantId() + \" and wareHouseId --> \" + stagingLine.getWarehouseId() + \" and itemCode --> \" + stagingLine.getItemCode());\r\n                Optional<OrderManagementLineV2> crossDock = repo.orderManagementLineV2Repository.getOrderManagementLineForCrossDock(\r\n                        stagingLine.getCompanyCode(), stagingLine.getPlantId(), stagingLine.getLanguageId(), stagingLine.getWarehouseId(), stagingLine.getItemCode());\r\n                log.info(\"Cross Dock Value is \" + crossDock);\r\n                if (crossDock.isPresent()) {\r\n                    stagingLine.setCrossDock(true);\r\n                } else {\r\n                    stagingLine.setCrossDock(false);\r\n                }\r\n            } catch (Exception e) {\r\n                log.info(\"Cross Dock Failed \" + e);\r\n            }\r\n            stagingList.add(stagingLine);\r\n        });\r\n        return stagingList;\r\n    }\r\n\r\n    /**\r\n     * @param preIBLine\r\n     * @param stagingHeader\r\n     * @return\r\n     */\r\n    public StagingLineEntityV2 createStagingLineV8(PreInboundLineEntityV2 preIBLine, StagingHeaderV2 stagingHeader, GrHeaderV2 grHeaderV2) {\r\n\r\n        StagingLineEntityV2 dbStagingLineEntity = new StagingLineEntityV2();\r\n        BeanUtils.copyProperties(preIBLine, dbStagingLineEntity, CommonUtils.getNullPropertyNames(preIBLine));\r\n        dbStagingLineEntity.setCaseCode(grHeaderV2.getCaseCode());\r\n        dbStagingLineEntity.setPalletCode(grHeaderV2.getCaseCode());    //Copy CASE_CODE\r\n        dbStagingLineEntity.setSourceBranchCode(stagingHeader.getSourceBranchCode());\r\n        dbStagingLineEntity.setStatusId(14L);\r\n        dbStagingLineEntity.setLanguageId(stagingHeader.getLanguageId());\r\n        dbStagingLineEntity.setCompanyCode(stagingHeader.getCompanyCode());\r\n        dbStagingLineEntity.setPlantId(stagingHeader.getPlantId());\r\n        dbStagingLineEntity.setCustomerCode(preIBLine.getCustomerCode());\r\n        dbStagingLineEntity.setTransferRequestType(preIBLine.getTransferRequestType());\r\n        dbStagingLineEntity.setOrderQty(preIBLine.getOrderQty());\r\n\r\n        //Pass ITM_CODE/SUPPLIER_CODE received in integration API into IMPARTNER table and fetch PARTNER_ITEM_BARCODE values. Values can be multiple\r\n        List<String> barcode = repo.stagingLineV2Repository.getPartnerItemBarcode(preIBLine.getItemCode(), preIBLine.getCompanyCode(),\r\n                preIBLine.getPlantId(), preIBLine.getWarehouseId(), preIBLine.getManufacturerName(), preIBLine.getLanguageId());\r\n        log.info(\"Barcode : \" + barcode);\r\n        if (barcode != null && !barcode.isEmpty()) {\r\n//                    dbStagingLineEntity.setPartner_item_barcode(barcode.replaceAll(\"\\\\s\", \"\").trim());      //to remove white space\r\n            dbStagingLineEntity.setPartner_item_barcode(barcode.get(0));\r\n        }\r\n\r\n        statusDescription = repo.stagingLineV2Repository.getStatusDescription(14L, stagingHeader.getLanguageId());\r\n        dbStagingLineEntity.setStatusDescription(statusDescription);\r\n        dbStagingLineEntity.setCompanyDescription(stagingHeader.getCompanyDescription());\r\n        dbStagingLineEntity.setPlantDescription(stagingHeader.getPlantDescription());\r\n        dbStagingLineEntity.setWarehouseDescription(stagingHeader.getWarehouseDescription());\r\n        dbStagingLineEntity.setStagingNo(stagingHeader.getStagingNo());\r\n        dbStagingLineEntity.setManufacturerCode(preIBLine.getManufacturerName());\r\n        dbStagingLineEntity.setManufacturerName(preIBLine.getManufacturerName());\r\n        dbStagingLineEntity.setDeletionIndicator(0L);\r\n        dbStagingLineEntity.setCreatedBy(preIBLine.getCreatedBy());\r\n        dbStagingLineEntity.setUpdatedBy(preIBLine.getCreatedBy());\r\n        dbStagingLineEntity.setCreatedOn(new Date());\r\n        dbStagingLineEntity.setUpdatedOn(new Date());\r\n//        StagingLineEntityV2 createStagingLine = stagingLineV2Repository.save(dbStagingLineEntity);\r\n//        log.info(\"created StagingLine records.\" + createStagingLine);\r\n        //update INV_QTY in stagingLine - calling stored procedure\r\n//        stagingLineV2Repository.updateStagingLineInvQtyUpdateProc(stagingHeader.getCompanyCode(), stagingHeader.getPlantId(),\r\n//                stagingHeader.getLanguageId(), stagingHeader.getWarehouseId(), stagingHeader.getRefDocNumber(), preIBLine.getPreInboundNo());\r\n        return dbStagingLineEntity;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param newInboundOrderV2\r\n     * @return\r\n     */\r\n    public InboundOrderV2 createInboundOrdersV2(InboundOrderV2 newInboundOrderV2) {\r\n\r\n        try {\r\n            InboundOrderV2 dbInboundOrder = inboundOrderV2Repository.\r\n                    findByRefDocumentNoAndInboundOrderTypeId(newInboundOrderV2.getOrderId(), newInboundOrderV2.getInboundOrderTypeId());\r\n            if (dbInboundOrder != null) {\r\n                throw new BadRequestException(\"Order is getting Duplicated\");\r\n            }\r\n            DataBaseContextHolder.clear();\r\n            DataBaseContextHolder.setCurrentDb(\"IMF\");\r\n            InboundOrderV2 inboundOrderV2 = inboundOrderV2Repository.save(newInboundOrderV2);\r\n            log.info(\"inboundOrderV2 ----> {}\", inboundOrderV2);\r\n            String routingDb = dbConfigRepository.getDbName(newInboundOrderV2.getCompanyCode(), newInboundOrderV2.getBranchCode(), newInboundOrderV2.getWarehouseID());\r\n            log.info(\"ROUTING DB FETCH FROM DB CONFIG TABLE --> {}\", routingDb);\r\n            DataBaseContextHolder.clear();\r\n            DataBaseContextHolder.setCurrentDb(routingDb);\r\n            InboundOrderV2 imdDB = inboundOrderV2Repository.save(newInboundOrderV2);\r\n            log.info(\"imdDB ----> {}\", imdDB);\r\n\r\n            return inboundOrderV2;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java b/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java
--- a/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java	
+++ b/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java	
@@ -424,8 +424,6 @@
             log.info("PreInboundNo, StagingNo, CaseCode, GrNumber : " + preInboundNo + ", " + stagingNo + ", " + caseCode + ", " + grNumber);
 
             statusDescription = getStatusDescription(statusId, languageId);
-            description = getDescription(companyCode, plantId, languageId, warehouseId);
-
 
             // Step 1: Create headers before line processing
             PreInboundHeaderEntityV2 preInboundHeader = createPreInboundHeaderV2(
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f775bbd4-20de-4090-80bf-8d0839f9f7b3\" name=\"Changes\" comment=\"gr release issue\">\r\n      <change beforePath=\"$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/model/wms/StockReceipt.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/model/wms/StockReceipt.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../ConnectorService/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../ConnectorService/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../../Namratha/Code/Java/TransactionService/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../../Namratha/Code/Java/TransactionService/.idea/misc.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/../../..\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ttAoD3z1Dm3B8oJH77whcHxATZ\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"D:/GIT/ALL/root/Namratha/Code/Java/TransactionService\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"reference.settingsdialog.project.gradle\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Ramya K\\TEK CLOVER\\Code\\MT-Inbound Order service\\InboundOrderService\\src\\main\\java\\com\\tekclover\\wms\\api\\inbound\\orders\\model\" />\r\n      <recent name=\"C:\\Users\\Ramya K\\TEK CLOVER\\Code\\MT-Inbound Order service\\InboundOrderService\\src\\main\\java\\com\\tekclover\\wms\\api\\inbound\\orders\\config\" />\r\n      <recent name=\"D:\\GIT\\root\\MultiTenant\\Dev\\InboundOrderService\\src\\main\\java\\com\\tekclover\\wms\\api\\transaction\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tekclover.wms.api.inbound.orders.repository\" />\r\n      <recent name=\"com.tekclover.wms.api.transaction.service\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"MTibOrderService\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"corretto-17\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.tekclover.wms.api.inbound.orders.TransactionServiceApplication\" />\r\n      <module name=\"InboundOrderService.main\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f775bbd4-20de-4090-80bf-8d0839f9f7b3\" name=\"Changes\" comment=\"\" />\r\n      <created>1741161170070</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741161170070</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Connector to WMS change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742369939361</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742369939361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Connector issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742891919383</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742891919383</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"gr release issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742901481452</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742901481452</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"stock_receipt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747478862346</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747478862346</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"stock_recepit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1747480777240</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1747480777240</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Connector to WMS change\" />\r\n    <MESSAGE value=\"Connector issue\" />\r\n    <MESSAGE value=\"stock_receipt\" />\r\n    <MESSAGE value=\"gr release issue\" />\r\n    <MESSAGE value=\"stock_recepit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"stock_recepit\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/SupplierInvoiceService.java</url>\r\n          <line>151</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/SupplierInvoiceService.java</url>\r\n          <line>201</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/SupplierInvoiceService.java</url>\r\n          <line>614</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/StockReceiptService.java</url>\r\n          <line>98</line>\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/controller/InboundOrderController.java</url>\r\n          <line>104</line>\r\n          <option name=\"timeStamp\" value=\"6\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/controller/InboundOrderController.java</url>\r\n          <line>98</line>\r\n          <option name=\"timeStamp\" value=\"7\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/controller/InboundOrderController.java</url>\r\n          <line>99</line>\r\n          <option name=\"timeStamp\" value=\"8\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,11 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="f775bbd4-20de-4090-80bf-8d0839f9f7b3" name="Changes" comment="gr release issue">
-      <change beforePath="$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/model/wms/StockReceipt.java" beforeDir="false" afterPath="$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/model/wms/StockReceipt.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java" beforeDir="false" afterPath="$PROJECT_DIR$/../ConnectorService/src/main/java/com/almailem/ams/api/connector/service/TransactionService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../ConnectorService/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../ConnectorService/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../ALMailam/Code/Autolab/Current_Prod/TransactionService/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../../../Namratha/Code/Java/TransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../../../Namratha/Code/Java/TransactionService/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/tekclover/wms/api/inbound/orders/service/namratha/SupplierInvoiceServiceV4.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../OutboundTransactionService/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../OutboundTransactionService/.idea/misc.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -59,7 +59,7 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "git-widget-placeholder": "main",
-    "last_opened_file_path": "D:/GIT/ALL/root/Namratha/Code/Java/TransactionService",
+    "last_opened_file_path": "D:/GIT/ALL/root/MultiTenant/MultiDBIntegratedCode/InboundTransactionService",
     "project.structure.last.edited": "Project",
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.0",
@@ -137,16 +137,25 @@
       <option name="project" value="LOCAL" />
       <updated>1747480777240</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="imbasic_data_1">
+      <option name="closed" value="true" />
+      <created>1750157738217</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1750157738217</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Connector to WMS change" />
     <MESSAGE value="Connector issue" />
     <MESSAGE value="stock_receipt" />
-    <MESSAGE value="gr release issue" />
     <MESSAGE value="stock_recepit" />
-    <option name="LAST_COMMIT_MESSAGE" value="stock_recepit" />
+    <MESSAGE value="gr release issue" />
+    <MESSAGE value="imbasic_data_1" />
+    <option name="LAST_COMMIT_MESSAGE" value="imbasic_data_1" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"corretto-17\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,4 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="corretto-17" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
